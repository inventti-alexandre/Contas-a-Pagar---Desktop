//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Contas_a_Pagar___Desktop.View.CFornecedor
{
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Fornecedor", Namespace = "http://schemas.datacontract.org/2004/07/Contas_a_Pagar___Desktop.Model", IsReference = true)]
    [System.SerializableAttribute()]
    public partial class Fornecedor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNPJField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CidadeField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EnderecoField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EstadoField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RazaoSocialField;

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNPJ
        {
            get
            {
                return this.CNPJField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CNPJField, value) != true))
                {
                    this.CNPJField = value;
                    this.RaisePropertyChanged("CNPJ");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cidade
        {
            get
            {
                return this.CidadeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CidadeField, value) != true))
                {
                    this.CidadeField = value;
                    this.RaisePropertyChanged("Cidade");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Endereco
        {
            get
            {
                return this.EnderecoField;
            }
            set
            {
                if ((object.ReferenceEquals(this.EnderecoField, value) != true))
                {
                    this.EnderecoField = value;
                    this.RaisePropertyChanged("Endereco");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Estado
        {
            get
            {
                return this.EstadoField;
            }
            set
            {
                if ((object.ReferenceEquals(this.EstadoField, value) != true))
                {
                    this.EstadoField = value;
                    this.RaisePropertyChanged("Estado");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RazaoSocial
        {
            get
            {
                return this.RazaoSocialField;
            }
            set
            {
                if ((object.ReferenceEquals(this.RazaoSocialField, value) != true))
                {
                    this.RazaoSocialField = value;
                    this.RaisePropertyChanged("RazaoSocial");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "CFornecedor.ICFornecedor")]
    public interface ICFornecedor
    {
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/Inserir", ReplyAction = "http://tempuri.org/ICFornecedor/InserirResponse")]
        string Inserir(Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor oFornecedor);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/Inserir", ReplyAction = "http://tempuri.org/ICFornecedor/InserirResponse")]
        System.Threading.Tasks.Task<string> InserirAsync(Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor oFornecedor);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/Alterar", ReplyAction = "http://tempuri.org/ICFornecedor/AlterarResponse")]
        string Alterar(Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor oFornecedor);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/Alterar", ReplyAction = "http://tempuri.org/ICFornecedor/AlterarResponse")]
        System.Threading.Tasks.Task<string> AlterarAsync(Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor oFornecedor);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/Excluir", ReplyAction = "http://tempuri.org/ICFornecedor/ExcluirResponse")]
        string Excluir(int ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/Excluir", ReplyAction = "http://tempuri.org/ICFornecedor/ExcluirResponse")]
        System.Threading.Tasks.Task<string> ExcluirAsync(int ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/SelecionarTodos", ReplyAction = "http://tempuri.org/ICFornecedor/SelecionarTodosResponse")]
        Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor[] SelecionarTodos();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/SelecionarTodos", ReplyAction = "http://tempuri.org/ICFornecedor/SelecionarTodosResponse")]
        System.Threading.Tasks.Task<Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor[]> SelecionarTodosAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/SelecionarTodosCriterio", ReplyAction = "http://tempuri.org/ICFornecedor/SelecionarTodosCriterioResponse")]
        Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor[] SelecionarTodosCriterio(string Criterio, string Escolha);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/SelecionarTodosCriterio", ReplyAction = "http://tempuri.org/ICFornecedor/SelecionarTodosCriterioResponse")]
        System.Threading.Tasks.Task<Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor[]> SelecionarTodosCriterioAsync(string Criterio, string Escolha);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/FornecedorExiste", ReplyAction = "http://tempuri.org/ICFornecedor/FornecedorExisteResponse")]
        bool FornecedorExiste(int IDFornecedor);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICFornecedor/FornecedorExiste", ReplyAction = "http://tempuri.org/ICFornecedor/FornecedorExisteResponse")]
        System.Threading.Tasks.Task<bool> FornecedorExisteAsync(int IDFornecedor);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICFornecedorChannel : Contas_a_Pagar___Desktop.View.CFornecedor.ICFornecedor, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CFornecedorClient : System.ServiceModel.ClientBase<Contas_a_Pagar___Desktop.View.CFornecedor.ICFornecedor>, Contas_a_Pagar___Desktop.View.CFornecedor.ICFornecedor
    {
        public CFornecedorClient()
        {
        }

        public CFornecedorClient(string endpointConfigurationName) :
                base(endpointConfigurationName)
        {
        }

        public CFornecedorClient(string endpointConfigurationName, string remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public CFornecedorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public CFornecedorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public string Inserir(Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor oFornecedor)
        {
            return base.Channel.Inserir(oFornecedor);
        }

        public System.Threading.Tasks.Task<string> InserirAsync(Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor oFornecedor)
        {
            return base.Channel.InserirAsync(oFornecedor);
        }

        public string Alterar(Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor oFornecedor)
        {
            return base.Channel.Alterar(oFornecedor);
        }

        public System.Threading.Tasks.Task<string> AlterarAsync(Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor oFornecedor)
        {
            return base.Channel.AlterarAsync(oFornecedor);
        }

        public string Excluir(int ID)
        {
            return base.Channel.Excluir(ID);
        }

        public System.Threading.Tasks.Task<string> ExcluirAsync(int ID)
        {
            return base.Channel.ExcluirAsync(ID);
        }

        public Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor[] SelecionarTodos()
        {
            return base.Channel.SelecionarTodos();
        }

        public System.Threading.Tasks.Task<Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor[]> SelecionarTodosAsync()
        {
            return base.Channel.SelecionarTodosAsync();
        }

        public Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor[] SelecionarTodosCriterio(string Criterio, string Escolha)
        {
            return base.Channel.SelecionarTodosCriterio(Criterio, Escolha);
        }

        public System.Threading.Tasks.Task<Contas_a_Pagar___Desktop.View.CFornecedor.Fornecedor[]> SelecionarTodosCriterioAsync(string Criterio, string Escolha)
        {
            return base.Channel.SelecionarTodosCriterioAsync(Criterio, Escolha);
        }

        public bool FornecedorExiste(int IDFornecedor)
        {
            return base.Channel.FornecedorExiste(IDFornecedor);
        }

        public System.Threading.Tasks.Task<bool> FornecedorExisteAsync(int IDFornecedor)
        {
            return base.Channel.FornecedorExisteAsync(IDFornecedor);
        }
    }
}